package org.torproject.ernie.web;

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.util.*;

/**
 * Parameterizable graph, generated by R.
 *
 * TODO Separate functionality into 1 servlet that dispatches requests
 *      depending on the requested graph (or answers with 404), n servlets
 *      to parse and verify parameters, and 1 class that invokes R to
 *      generate graphs.
 * TODO Implement a cache of the least recently used 100 (?) graphs, plus
 *      invalidation of graphs in the cache when new data is available.
 * TODO Use another directory for storing stats input data and generated
 *      graphs than /tmp/.
 */
public class ImageServlet extends HttpServlet {

  public void doGet(HttpServletRequest request,
      HttpServletResponse response) throws IOException,
      ServletException {

    /* Find out which file we should return. If we don't have it (and
     * cannot generate it), reply with 404. */
    Set<String> knownImages = new HashSet<String>(Arrays.asList(
        "networksize.png".split(",")));
    if (!request.getRequestURI().startsWith("/ernie/graphs/") ||
        !knownImages.contains(request.getRequestURI().substring(
          "/ernie/graphs/".length()))) {
      response.setStatus(HttpServletResponse.SC_NOT_FOUND);
      return;
    }

    /* Look if we have a valid parameter value for xaxis. If not, we'll
     * use 30d as default value. */
    Set<String> validXaxisParameters = new HashSet<String>(
        Arrays.asList(("3d,10d,30d,90d,180d").split(",")));
    String xaxisParameter = request.getParameter("xaxis");
    String days = "30";
    if (validXaxisParameters.contains(xaxisParameter)) {
      days = xaxisParameter.substring(0, xaxisParameter.length() - 1);
    }

    /* Execute external R process to generate the graph we want and write
     * it to a temporary file in /tmp/. */
    String tempFilename = "/tmp/networksize-" + System.currentTimeMillis()
        + ".png";
    try {
      File rFile = new File(this.getServletContext().getRealPath(
          "/WEB-INF/consensus.R"));
      String[] cmd = { "sh", "-c", "/usr/bin/R --slave --args "
          + days + " " + tempFilename + " < " + rFile.getAbsolutePath() };
      Runtime rt = Runtime.getRuntime();
      Process p = rt.exec(cmd);
      p.waitFor();
    } catch (IOException e) {
      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
      return;
    } catch (InterruptedException e) {
      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
      return;
    }

    /* Read file from disk and write it to response. */
    BufferedInputStream input = null;
    BufferedOutputStream output = null;
    try {
      File imageFile = new File(tempFilename);
      response.setContentType("image/png");
      response.setHeader("Content-Length", String.valueOf(
          imageFile.length()));
      response.setHeader("Content-Disposition",
          "inline; filename=\"networksize.png\"");
      input = new BufferedInputStream(new FileInputStream(imageFile),
          1024);
      output = new BufferedOutputStream(response.getOutputStream(), 1024);
      byte[] buffer = new byte[1024];
      int length;
      while ((length = input.read(buffer)) > 0) {
          output.write(buffer, 0, length);
      }
    } finally {
      output.close();
      input.close();
    }
  }
}

